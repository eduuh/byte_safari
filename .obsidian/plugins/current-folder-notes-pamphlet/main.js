/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  CurrentFolderNotesDisplayView: () => CurrentFolderNotesDisplayView,
  VIEW_TYPE_CURRENT_FOLDER_NOTES_DISPLAY: () => VIEW_TYPE_CURRENT_FOLDER_NOTES_DISPLAY,
  default: () => CurrentFolderNotesDisplay
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_obsidian2 = require("obsidian");
var import_obsidian3 = require("obsidian");
var DEFAULT_SETTINGS = {
  excludeTitlesFilter: "_index",
  includeTitleFilter: "",
  prettyTitleCase: true,
  includeSubfolderNotes: false,
  includeCurrentFileOutline: true,
  includeAllFilesOutline: false
  // iconUsed: 'folder',
};
var CurrentFolderNotesDisplay = class extends import_obsidian.Plugin {
  fileChangeHandler(file) {
    if (file instanceof import_obsidian.TFile && file.path === this.file.path) {
      this.load();
    }
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new CurrentFolderNotesDisplaySettingTab(this.app, this));
    this.registerView(VIEW_TYPE_CURRENT_FOLDER_NOTES_DISPLAY, (leaf) => new CurrentFolderNotesDisplayView(leaf, this));
    this.addRibbonIcon("folder", "Activate folder notes display", () => {
      this.activateView();
    });
    this.addCommand({
      id: "activate-folder-notes-display",
      name: "Open Pane",
      callback: () => {
        this.activateView();
      }
    });
    this.registerEvent(this.app.workspace.on("file-open", async (file) => {
      this.refreshView();
    }));
    this.registerEvent(this.app.vault.on("delete", async (file) => {
      this.refreshView();
    }));
    this.registerEvent(this.app.vault.on("create", async (file) => {
      this.refreshView();
    }));
    this.registerEvent(this.app.vault.on("rename", async (file) => {
      this.refreshView();
    }));
  }
  onunload() {
    console.log("unloading plugin");
  }
  async activateView() {
    const { workspace } = this.app;
    let leaf = null;
    const leaves = workspace.getLeavesOfType(VIEW_TYPE_CURRENT_FOLDER_NOTES_DISPLAY);
    if (leaves.length) {
      leaf = leaves[0];
    } else {
      leaf = workspace.getRightLeaf(false);
      if (leaf) {
        await leaf.setViewState({ type: VIEW_TYPE_CURRENT_FOLDER_NOTES_DISPLAY, active: true });
      }
    }
    if (!leaf) {
      new import_obsidian.Notice("Could not create a new leaf for the view");
      return;
    }
    workspace.revealLeaf(leaf);
  }
  async refreshView() {
    const { workspace } = this.app;
    const leaves = workspace.getLeavesOfType(VIEW_TYPE_CURRENT_FOLDER_NOTES_DISPLAY);
    if (leaves.length) {
      const view = leaves[0].view;
      await view.displayNotesInCurrentFolder();
    } else {
      new import_obsidian.Notice("Could not find the view");
      this.activateView();
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var VIEW_TYPE_CURRENT_FOLDER_NOTES_DISPLAY = "current-folder-notes-view";
var CurrentFolderNotesDisplayView = class extends import_obsidian2.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.plugin = plugin;
  }
  getViewType() {
    return VIEW_TYPE_CURRENT_FOLDER_NOTES_DISPLAY;
  }
  getDisplayText() {
    return "Current Folder Notes";
  }
  getIcon() {
    return "folder";
  }
  async onOpen() {
    await this.displayNotesInCurrentFolder();
  }
  async onClose() {
  }
  // main.ts
  // Function to create clickable headings
  createClickableHeadings(container, currentFileContent, currentFilePath, addExtraHeadingCSS) {
    const headings = currentFileContent.match(/^(#+)\s+(.*)$/gm);
    if (headings) {
      headings.forEach((heading) => {
        const headingLevelMatch = heading.match(/^(#+)/);
        if (headingLevelMatch) {
          let headingText = heading.replace(/^(#+)\s+/, "");
          headingText = this.extractAlias(headingText);
          let headingLabel = "\u2192 " + headingText;
          const p = container.createEl("p", { text: headingLabel });
          p.classList.add("basic-heading");
          if (addExtraHeadingCSS) {
            p.classList.add("extra-heading-style");
          }
          p.addEventListener("click", async () => {
            this.app.workspace.openLinkText("#" + headingText, currentFilePath, false);
          });
          p.onmouseover = () => {
            p.classList.add("hover-style-heading");
          };
          p.onmouseout = () => {
            p.classList.remove("hover-style-heading");
          };
        }
      });
    }
  }
  // Function to extract alias from heading text
  extractAlias(headingText) {
    const matches = headingText.match(/\[\[.*\|(.*?)\]\]/);
    return matches ? matches[1] : headingText;
  }
  async displayNotesInCurrentFolder() {
    const container = this.containerEl.children[1];
    container.empty();
    const sequenceWithPrefixOrLongest = (str) => {
      const tMatches = str.match(/T(\d+)/);
      if (tMatches)
        return parseInt(tMatches[1]);
      const yMatches = str.match(/Y(\d+)/);
      if (yMatches)
        return parseInt(yMatches[1]) + 1e3;
      const matches = str.match(/\d+/g) || [];
      return Math.max(...matches.map((numStr) => parseInt(numStr)), 0);
    };
    container.createEl("h6", { text: "Current Folder Notes" });
    const activeFile = this.app.workspace.getActiveFile();
    const currentFilePath = activeFile ? activeFile.path : "";
    const parentFolderPath = currentFilePath.substring(0, currentFilePath.lastIndexOf("/"));
    let folder = this.app.vault.getAbstractFileByPath(parentFolderPath);
    let parentFolderFiles = [];
    if (folder instanceof import_obsidian3.TFolder) {
      parentFolderFiles = folder.children;
    }
    const includesFilter = this.plugin.settings.includeTitleFilter;
    if (includesFilter && includesFilter.length > 0) {
      let possibleFilteredFiles2 = parentFolderFiles;
      if (includesFilter.includes(",") || includesFilter.includes(" ")) {
        let includeWords = includesFilter.split(",");
        includeWords.forEach((word, index) => {
          includeWords[index] = word.trim();
        });
        if (includeWords.length > 0) {
          possibleFilteredFiles2 = parentFolderFiles.filter((file) => includeWords.some((word) => file.basename.toLowerCase().includes(word.toLowerCase())));
        } else {
          possibleFilteredFiles2 = parentFolderFiles;
        }
      } else {
        possibleFilteredFiles2 = parentFolderFiles.filter((file) => file.basename.toLowerCase().includes(includesFilter.toLowerCase()));
      }
      if (possibleFilteredFiles2.length == 0) {
        container.createEl("p", { text: `No notes found in the current folder that include "${includesFilter}"` });
        return;
      }
      parentFolderFiles = possibleFilteredFiles2;
    }
    let parentFolderFilesNoSubfolders = parentFolderFiles;
    if (!this.plugin.settings.includeSubfolderNotes) {
      parentFolderFilesNoSubfolders = parentFolderFiles.filter((file) => !file.path.substring(parentFolderPath.length + 1).includes("/"));
    }
    const excludeFilter = this.plugin.settings.excludeTitlesFilter;
    let filteredFiles = parentFolderFilesNoSubfolders;
    let possibleFilteredFiles = parentFolderFilesNoSubfolders;
    if (excludeFilter.length > 0) {
      if (excludeFilter.includes(",")) {
        let excludeWords = excludeFilter.split(",");
        excludeWords.forEach((word, index) => {
          excludeWords[index] = word.trim();
        });
        possibleFilteredFiles = parentFolderFilesNoSubfolders.filter((file) => !excludeWords.some((word) => file.basename.toLowerCase().includes(word.toLowerCase())));
      } else {
        possibleFilteredFiles = parentFolderFilesNoSubfolders.filter((file) => !file.basename.includes(excludeFilter));
      }
      if (possibleFilteredFiles.length == 0) {
        container.createEl("p", { text: `No notes found in the current folder that do not include "${excludeFilter}"` });
        return;
      }
      filteredFiles = possibleFilteredFiles;
    }
    if (filteredFiles.length === 0) {
      container.createEl("p", { text: "No notes in this folder" });
      return;
    }
    filteredFiles.sort((a, b) => sequenceWithPrefixOrLongest(a.basename) - sequenceWithPrefixOrLongest(b.basename));
    for (const file of filteredFiles) {
      const p = container.createEl("p");
      const a = p.createEl("a", { text: file.basename });
      if (this.plugin.settings.prettyTitleCase) {
        a.innerText = a.innerText.replace(/\w\S*/g, function(txt) {
          return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
        });
      }
      a.className = "folder-notes-style";
      if (file.path === currentFilePath) {
        a.className += " current-file";
        a.innerText = "\u2605 " + a.innerText;
      }
      var MyHeadings = false;
      var ThisFileContent = "";
      if (this.plugin.settings.includeAllFilesOutline || this.plugin.settings.includeCurrentFileOutline) {
        if (file) {
          ThisFileContent = await this.app.vault.read(file);
          MyHeadings = true;
        }
      }
      if (this.plugin.settings.includeAllFilesOutline && file.path !== currentFilePath) {
        if (MyHeadings) {
          this.createClickableHeadings(container, ThisFileContent, file.path, false);
        }
      }
      if ((this.plugin.settings.includeAllFilesOutline || this.plugin.settings.includeCurrentFileOutline) && file.path === currentFilePath) {
        if (MyHeadings) {
          this.createClickableHeadings(container, ThisFileContent, file.path, true);
        }
      }
      a.onmouseover = () => {
        a.classList.add("hover-style-file");
      };
      a.onmouseout = () => {
        a.classList.remove("hover-style-file");
      };
      a.addEventListener("click", () => {
        this.app.workspace.openLinkText(file.basename, parentFolderPath);
      });
    }
  }
};
var CurrentFolderNotesDisplaySettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Exclude titles filter").setDesc("What notes to exclude from the view. This can be a list of words seperated by commas.").addText((text) => text.setPlaceholder("_Index").setValue(this.plugin.settings.excludeTitlesFilter).onChange(async (value) => {
      this.plugin.settings.excludeTitlesFilter = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Includes titles filter").setDesc("Only include notes with this in their title. This can be a list of words seperated by commas.").addText((text) => text.setPlaceholder("Chapter").setValue(this.plugin.settings.includeTitleFilter).onChange(async (value) => {
      this.plugin.settings.includeTitleFilter = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Pretty title case").setDesc("Convert the note titles to Title Case").addToggle((toggle) => toggle.setValue(this.plugin.settings.prettyTitleCase).onChange(async (value) => {
      this.plugin.settings.prettyTitleCase = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Include subfolder notes").setDesc("Include notes in subfolders of the current folder").addToggle((toggle) => toggle.setValue(this.plugin.settings.includeSubfolderNotes).onChange(async (value) => {
      this.plugin.settings.includeSubfolderNotes = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Include outline of current file").setDesc("Include the outline of the current file in the view").addToggle((toggle) => toggle.setValue(this.plugin.settings.includeCurrentFileOutline).onChange(async (value) => {
      this.plugin.settings.includeCurrentFileOutline = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Include outline of all files in the current folder").setDesc("Include outline of all files in the current folder").addToggle((toggle) => toggle.setValue(this.plugin.settings.includeAllFilesOutline).onChange(async (value) => {
      this.plugin.settings.includeAllFilesOutline = value;
      await this.plugin.saveSettings();
    }));
  }
};


/* nosourcemap */